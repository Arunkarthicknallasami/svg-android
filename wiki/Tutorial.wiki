#summary A quick tutorial for using svg-android.

== Downloading ==

Download the jar file [http://code.google.com/p/svg-android/downloads/detail?name=svg-android.jar here] and place it in the `libs` folder of your project.

== A Simple Example ==

Suppose we have a new Android project with a blank Activity, the svg-android.jar file in the `libs` directory, and [http://code.google.com/p/svg-android/downloads/detail?name=android.svg this] SVG file in the `res/raw` folder.

The following code in the `onCreate` method will make the activity render the SVG file:

{{{
    public void onCreate(Bundle savedInstanceState) {
        super.onCreate(savedInstanceState);
        // Create a new ImageView
        ImageView imageView = new ImageView(this);
        // Set the background color to white
        imageView.setBackgroundColor(Color.WHITE);
        // Parse the SVG file from the resource
        SVG svg = SVGParser.getSVGFromResource(this, R.raw.android);
        // Get a drawable from the parsed SVG and set it as the drawable for the ImageView
        imageView.setImageDrawable(svg.createPictureDrawable());
        // Set the ImageView as the content view for the Activity
        setContentView(imageView);
    }
}}}

== How to Prepare Your Vector Images ==

This library supports a subset of the [http://www.w3.org/TR/SVGMobile/ SVG Basic 1.1] specification. Typically, you can just load your vector artwork in Illustrator and then save it as a SVG file (selecting the SVG Basic 1.1 option when asked) and it will work fine. These are the features of SVG Basic not supported:

  * All text and font features.
  * Raster images (bitmaps).
  * Styles.
  * Symbols, conditional processing.
  * Patterns.
  * Masks, filters and views.
  * Interactivity, linking, scripting and animation.

If your artwork includes text, you can right-click on the text object in Illustrator and choose _Create Outlines_. This converts the text in to standard paths, which will then work fine with the library.

Not all Illustrator effects (such as drop shadow) will work as they result in the creation of raster images when saved as SVG Basic.

== Some Tricks ==

*Canvas Drawing*

If you are drawing the SVG directly on to a Canvas, as opposed to populating an ImageView or some other pre-built container, then just use the `android.graphics.Picture` object instead:

{{{
    Canvas canvas;
    ...
    // Parse the SVG file from the resource
    SVG svg = SVGParser.getSVGFromResource(this, R.raw.android);
    // Get the picture
    Picture picture = svg.getPicture();
    // Draw picture in canvas
    // Note: use transforms such as translate, scale and rotate to position the picture correctly
    canvas.drawPicture(picture);
    ...
}}}

*Color Substitution*

Upon loading the SVG, you can substitute one color in the SVG for another. For example, to make the green Android blue instead:

{{{
        // 0xFF9FBF3B is the hex code for the existing Android green, 0xFF1756c9 is the new blue color
        SVG svg = SVGParser.getSVGFromResource(getResources(), R.raw.android, 0xFF9FBF3B, 0xFF1756c9);
}}}

Future versions of the library will support substitutions of multiple colors.

== More Information ==

To learn more, visit the [http://svg-android.googlecode.com/svn/trunk/svgandroid/docs/index.html Javadocs] or browse the [http://code.google.com/p/svg-android/source/browse/#svn%2Ftrunk%2Fsvgandroid%2Fsrc%2Fcom%2Flarvalabs%2Fsvgandroid source code] directly. Also be sure to take a look at how the SVG library is used in the extensive [http://code.google.com/p/svg-android/source/browse/#svn%2Ftrunk%2Fsvgwallpaper Androidify Wallpaper] demo, for which the full source code is available.